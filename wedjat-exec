#!/bin/lua


--[=[ START General purpose functions ]=]--

-- Terminate the process and print the given message.
local function kill(m, as)
	print(m)
	print("Arguments:")
	local i = 1
	if as ~= nil and type(as) == "table" then
		for _,a in ipairs(as) do
			print("\tArg" .. i .. " (" .. a.Type.. "): " .. a.Content)
			i = i + 1
		end
	end
	os.exit()
end

-- Split a string into a table by a character.
local function split(str, splitChar)
	local resultSplit = {}
        if splitChar == nil then
                splitChar = " "
        end
        if str and splitChar then
                for part in string.gmatch(str, "([^"..splitChar.."]+)") do
                        table.insert(resultSplit, part)
                end
        end
        return resultSplit
end

-- Get the data type of the given argument text.
local dataTypeIdentifiers = {
	["\""] = "str",
	[":"] = "int",
	["'"] = "bol",
	["["] = "arr",
	["{"] = "blk",
	["("] = "var",
	["|"] = "arg"
}
local function GetDataType(argument)
	local Id = string.sub(argument, 1, 1)
	if dataTypeIdentifiers[Id] ~= nil then
		return dataTypeIdentifiers[Id]
	else
		return "str"
	end
end

--[=[ END General purpose functions ]=]--





--[=[ START Cleaning and Formatting ]=]--

-- Remove comments and unneccessary newlines, tabs, etc from the inputted text.
local function CleanJunk(text)
	local final = ""

	local instring = false
	local inarray = false
	local c = ""
	local lc = ""
	local i = 1
	while i <= #text do
		c = string.sub(text, i, i)
		if c == "\"" and lc ~= "\\" then
			instring = not instring
			final = final .. c
			lc = c
			i = i + 1
		elseif c == "[" and instring ~= true then
			inarray = true
			final = final .. c
			lc = c
			i = i + 1
		elseif c == "]" and instring ~= true then
			inarray = false
			final = final .. c
			lc = c
			i = i + 1
		elseif c == " " and instring ~= true then
			if i == 1 or lc == " " or inarray == true then
				lc = c
				i = i + 1
			else
				lc = c
				i = i + 1
				final = final .. c
			end
		elseif c == "\n" or c == "\t" and instring ~= true then
			lc = c
			i = i + 1
		elseif c == ">" and instring == false then
			if instring == false then
				local li = i
				local lch = ""
				while li <= #text do
					lch = string.sub(text, li, li)
					if lch == "\n" then
						lc = "\n"
						i = li + 1
						break
					end
					li = li + 1
				end
			end
		else
			final = final .. c
			lc = c
                        i = i + 1
		end
	end
	return final
end

-- Remove leading and trailing whitespace from the inputted text.
local function FinalTrim(text)
	local final = ""

	local c = ""
	local i = 1
	while i <= #text do
		c = string.sub(text, i, i)
		if c == " " then
			i = i + 1
		else
			break
		end
	end

	final = string.sub(text, i, #text)

	i = #text
	while i >= 1 do
		c = string.sub(text, i, i)
		if c == " " then
			i = i - 1
		else
			break
		end
	end

	final = string.sub(final, 1, i)

	return final
end


local function SplitStatements(text)
	local sl = {}
	local cs = ""
	local instring = false
	local inblock = false
	local blockdepth = 0
	local c = ""
	local lc = ""
	local i = 1

	while i <= #text do
		c = string.sub(text, i, i)
		if c == "\"" and lc ~= "\\" then
			instring = not instring
			lc = c
			cs = cs .. c
		elseif c == "{" and instring ~= true then
			inblock = true
			blockdepth = blockdepth + 1
			lc = c
			cs = cs .. c
		elseif c == "}" and instring ~= true then
			blockdepth = blockdepth - 1
			if blockdepth == 0 then
				inblock = false
			end
			lc = c
			cs = cs .. c
		elseif c == ";" and instring ~= true and inblock ~= true then
			table.insert(sl, FinalTrim(cs))
			cs = ""
		else
			lc = c
			cs = cs .. c
		end
		i = i + 1
	end
	return sl
end

-- Return a formatted table containing all information of a statement
local function getStatementInfo(statement)
	local argstart = 1
	local c = ""
	while argstart <= #statement do
		c = string.sub(statement, argstart, argstart)
		if argstart == #statement then
			return {
				["CommandName"] = statement,
				["Arguments"] = {}
			}
		else
			argstart = argstart + 1
		end
		if c == " " then
			break
		end
	end

	local commandname = string.sub(statement, 1, argstart - 2)
	local arguments = {}
	local carg = ""

	local lc = ""
	local i = argstart
	local instring = false
	local inblock = false
	local inarray = false
	local arraydepth = 0
	local blockdepth = 0
	while i <= #statement do
		c = string.sub(statement, i, i)
		if c == "\"" then
			if lc ~= "\\" and inblock ~= true and inarray ~= true then
				instring = not instring
			end
			carg = carg .. c
		elseif c == "{" and instring ~= true and inarray ~= true then
			inblock = true
			blockdepth = blockdepth + 1
			carg = carg .. c
		elseif c == "}" and instring ~= true and inarray ~= true then
			blockdepth = blockdepth - 1
			if blockdepth == 0 then
				inblock = false
			end
			carg = carg .. c
		elseif c == "[" and instring ~= true and inblock ~= true then
			inarray = true
			arraydepth = arraydepth + 1
			carg = carg .. c
		elseif c == "]" and instring ~= true and inblock ~= true then
			arraydepth = arraydepth - 1
			if arraydepth == 0 then
				inarray = false
			end
			carg = carg .. c
		elseif c == " " then
			if inblock ~= true and instring ~= true and inarray ~= true then
				table.insert(arguments, {["Content"] = carg, ["Type"] = GetDataType(carg)})
				carg = ""
			else
				carg = carg .. c
			end
		else
			carg = carg .. c
		end
		lc = c
		i = i + 1
	end
	table.insert(arguments, {["Content"] = carg, ["Type"] = GetDataType(carg)})

	return {
		["CommandName"] = commandname,
		["Arguments"] = arguments
	}
end

-- Format all statements and put them into a big list
local function formatStatements(statements)
	local formatted = {}

	for _,statement in ipairs(statements) do
		table.insert(formatted, getStatementInfo(statement))
	end

	return formatted
end

--[=[ END Cleaning and Formatting ]=]--





--[=[ START Command execution, management, and variable management ]=]--

-- List containing all variables stored in the program.
local WedjatProgramVariables = {
	["__VER"] = {
		["Name"] = "__VER",
		["Type"] = "str",
		["Content"] = "super alpha"
	}
}

-- List containing commands created by the user with the `command` command
local WedjatUserCommands = {}

-- List containing all arguments passed to the wedjat program on execution
local WedjatProgramArguments = {}
for i = 2, #arg do
	table.insert(WedjatProgramArguments, arg[i])
end

-- Little function to check if a variable exists by name
local function cv(v)
	if WedjatProgramVariables[v] == nil then
		return false
	else
		return true
	end
end

-- Little function to check if variable type
local function cvt(v)
	if WedjatProgramVariables[v] ~= nil then
		return WedjatProgramVariables[v].Type
	else
		return nil
	end
end

-- Convert string, integer, and boolean command arguments to their lua equivalents.
local function argumentToLuaObject(Argument)
	if Argument.Type == "str" then
		if string.sub(Argument.Content, 1, 1) == "\"" then
			return string.sub(Argument.Content, 2, #Argument.Content - 1)
		else
			return Argument.Content
		end
	elseif Argument.Type == "int" then
		return tonumber(string.sub(Argument.Content, 2, #Argument.Content - 1))
	elseif Argument.Type == "bol" then
		if Argument.Content == "'True'" then
			return true
		elseif Argument.Content == "'False'" then
			return false
		end
	else
		return tostring(Argument.Content)
	end
end

local wedjatOpsToLua = {
	["="] = "==",
	["&"] = "and",
	["/"] = "or",
	["("] = "(",
	[")"] = ")"
}
local function argsToLuaExpression(args)
	local expression = ""
	for _,a in ipairs(args) do
		local al = argumentToLuaObject(a)
		if type(al) == "string" and wedjatOpsToLua[al] == nil then
			al = "\"" .. al .. "\""
		end
		if wedjatOpsToLua[al] ~= nil then
			al = wedjatOpsToLua[al]
		end
		expression = expression .. al
	end
	return expression
end

local function testLuaExpression(expression)
	local result
	local f, e = load("return (" .. expression .. ")")
	if f then
		result = f()
	end
	return result
end

local runCommand
local runBlock
local LOOPRUNNING = false
local ISCUSTOMCOMMAND = false
local CustomCommandArguments = {}

-- Bigass list of every core wedjat command.
local WedjatCoreCommands = {
	-- define. Define a variable and create storage for it.
	-- Usage: define <variable name> <data type (str, int, bol, arr, blk)>;
	-- Example: define myString str; define myNumber int;
	["define"] = function(Arguments)
		if #Arguments ~= 2 then
			kill("define: 2 arguments are expected.", Arguments)
		end
		if Arguments[1].Type ~= "str" or Arguments[2].Type ~= "str" then
			kill("define: All arguments are expected to be of value str.", Arguments)
		end

		local variableName = Arguments[1].Content
		local variableType = Arguments[2].Content

		if cv(variableName) == true then
			kill("define: Variable " .. variableName .. " is already defined.", Arguments)
		end

		if variableType ~= "str"
		and variableType ~= "int"
		and variableType ~= "arr"
		and variableType ~= "bol"
		and variableType ~= "blk"
		then
			kill("define: Unknown type \"" .. variableType .. "\" supplied for variable definition.", Arguments)
		end

		WedjatProgramVariables[variableName] = {["Name"] = variableName, ["Type"] = variableType, ["Content"] = ""}
	end,
	-- set. Set the contents of a variable to something.
	-- Usage: set <variable name> <data>;
	-- Example: set myString coolio; set myString "ooga booga"; set myNumber :420:;
	["set"] = function(Arguments)
		if #Arguments ~= 2 then
			kill("set: 2 arguments are expected.", Arguments)
		end
		if Arguments[1].Type ~= "str" then
			kill("set: First argument is expected to be of type str.", Arguments)
		end

		local variableName = Arguments[1].Content
		local variableObject
		if cv(variableName) == false then
			kill("set: Variable " .. variableName .. " does not exist.", Arguments)
		end
		variableObject = WedjatProgramVariables[variableName]

		if Arguments[2].Type ~= variableObject.Type then
			kill("set: Data type of provided argument does not match data type of specified variable.", Arguments)
		end

		variableObject.Content = Arguments[2].Content
	end,
	-- write. Write all string, integer, and boolean arguments to the standard output as text.
	-- Usage: write <data>;
	-- Example: write "My string is " (myString); write ooooogaaaaaa; write 'True';
	["write"] = function(Arguments)
		if #Arguments < 1 then
			kill("write: At least one argument is expected.", nil)
		end
		local output = ""
		for _,argument in ipairs(Arguments) do
			if argument.Type == "str" then
				if string.sub(argument.Content, 1, 1) == "\"" then
					output = output .. string.sub(argument.Content, 2, #argument.Content - 1)
				else
					output = output .. argument.Content
				end
			elseif argument.Type == "int" or argument.Type == "bol" then
				output = output .. string.sub(argument.Content, 2, #argument.Content - 1)
			else
				kill("write: All arguments must be of data type str, int, or bol.", Arguments)
			end
		end
		output = output:gsub("\\n", "\n")
		output = output:gsub("\\t", "\t")
		io.write(output)
	end,
	-- read. Read string input from stdin and store it in a variable.
	-- Usage: read <variable name>;
	-- Example: read myString;
	["read"] = function(Arguments)
		if #Arguments ~= 1 then
			kill("read: 1 argument is expected.", nil)
		end
		if Arguments[1].Type ~= "str" then
			kill("read: String argument expected.", Arguments)
		end
		local variableName = Arguments[1].Content
		if cv(variableName) == false then
			kill("read: Variable " .. variableName .. " does not exist.", Arguments)
		end
		local variableObject = WedjatProgramVariables[variableName]
		if variableObject.Type ~= "str" then
			kill("read: Variable " .. variableName .. " is not of type str.", Arguments)
		end
		variableObject.Content = tostring(io.read())
	end,
	-- type. Gets the type of the data inputted and stores it in string representation in the given variale.
	-- Usage: type <variable name> <data>;
	-- Example: type DataType "this is a string"; type DataType :69:; (makes DataType hold "str" // makes DataType hold "int")
	["type"] = function(Arguments)
		if WedjatProgramVariables[Arguments[1].Content] == nil or WedjatProgramVariables[Arguments[1].Content].Type ~= "str" or Arguments[2] == nil then
			kill("type: Invalid arguments.")
		end

		if #Arguments ~= 2 then
			kill("type: 2 arguments are expected.", Arguments)
		end
		if Arguments[1].Type ~= "str" or Arguments[2].Type ~= "str" then
			kill("type: All arguments must be of data type str.", Arguments)
		end

		local variableName = Arguments[1].Content
		if cv(variableName) == false then
			kill("type: Variable " .. variableName .. " does not exist.", Arguments)
		end
		if cvt(variableName) ~= "str" then
			kill("type: Variable " .. variableName .. " is not of type str.", Arguments)
		end

		WedjatProgramVariables[Arguments[1].Content].Content = Arguments[2].Type
	end,
	-- math. Write the final value of the given math expression into the variable provided.
	-- Each operator and number, parenthesis etc is meant to be a single argument.
	-- Left parenthsis must be quoted, otherwise the interpreter will think they are variables.
	-- Usage: math <equation, spread across arguments>;
	-- Example: math myResult :1: + :1:; math myResult "(" :420: - :69: ) / 2;
	["math"] = function(Arguments)
		local equation = ""
		if #Arguments < 2 then
			kill("math: At least 2 arguments are expected.", Arguments)
		end
		local variableName = Arguments[1].Content
		if cv(variableName) == false then
			kill("math: Variable " .. variableName .. " does not exist.", Arguments)
		end
		if cvt(variableName) ~= "int" then
			kill("math: The variable " .. variableName .. " is not of type int.", Arguments)
		end

		local validOperators = {
			["+"] = true,
			["-"] = true,
			["*"] = true,
			["/"] = true,
			["^"] = true,
			["%"] = true,
			["("] = true,
			[")"] = true
		}

		local i = 2
		while i <= #Arguments do
			local argument = Arguments[i]
			if argument.Type ~= "str" and argument.Type ~= "int" then
				kill("math: Only string and integer values are expected.", Arguments)
			end
			local c = argumentToLuaObject(argument)
			if type(c) == "string" then
				if validOperators[c] ~= true then
					kill("math: Unexpected operator " .. c, Arguments)
				end
			elseif type(c) == "number" then
				c = tostring(c)
			end
			equation = equation .. c
			i = i + 1
		end

		local f, e = load("return " .. equation)
		if f then
			WedjatProgramVariables[variableName].Content = ":" .. f() .. ":"
		end
	end,
	["strcat"] = function(Arguments)
		if Arguments[1].Type ~= "str" then
			kill("strcat: String arguments expected.", Arguments)
		end
		local variableName = Arguments[1].Content
		if cv(variableName) == false then
			kill("strcat: Variable " .. variableName .. " does not exist.", Arguments)
		end
		if cvt(variableName) ~= "str" then
			kill("strcat: The variable " .. variableName .. " is not of type str.", Arguments)
		end
		local final = ""
		local i = 2
		while i <= #Arguments do
			local argument = Arguments[i]
			if argument.Type ~= "str" then
				kill("strcat: String arguments expected.", Arguments)
			end
			final = final .. argumentToLuaObject(argument)
			i = i + 1
		end
		WedjatProgramVariables[variableName].Content = "\"" .. final .. "\""
	end,
	["tostr"] = function(Arguments)
		local variableName = argumentToLuaObject(Arguments[1])
		if cv(variableName) == false then
			kill("tostr: Variable " .. variableName .. " does not exist.", Arguments)
		end
		if cvt(variableName) ~= "str" then
			kill("tostr: Variable " .. variableName .. " is not of type str.", Arguments)
		end
		if Arguments[2] == nil then
			kill("tostr: No data supplied for conversion.", Arguments)
		end
		WedjatProgramVariables[variableName].Content = tostring(argumentToLuaObeject(Arguments[2]))
	end,
	["toint"] = function(Arguments)
		local variableName = argumentToLuaObject(Arguments[1])
		if cv(variableName) == false then
			kill("toint: Variable " .. variableName .. " does not exist.", Arguments) 
		end
		if cvt(variableName) ~= "int" then
			kill("toint: Variable " .. variableName .. " is not of type int.", Arguments)
		end
		if Arguments[2] == nil then
			kill("toint: No data supplied for conversion.", Arguments)
		end
		WedjatProgramVariables[variableName].Content = ":" .. argumentToLuaObject(Arguments[2]) .. ":"
	end,
	["sleep"] = function(Arguments)
		if #Arguments ~= 1 then
			kill("sleep: Only one argument is expected.", Arguments)
		end
		if Arguments[1].Type ~= "int" then
			kill("sleep: Argument is expected to be of type int.", Arguments)
		end
		os.execute("sleep " .. tostring(argumentToLuaObject(Arguments[1])))
	end,
	["runblock"] = function(Arguments)
		if #Arguments ~= 1 then
			kill("runblock: One argument expected.", Arguments)
		end
		if Arguments[1].Type ~= "blk" then
			kill("runblock: Arguments are expected to be of type blk.", Arguments)
		end
		runBlock(Arguments[1].Content)
	end,
	["if"] = function(Arguments)
		if #Arguments < 2 then
			kill("if: At least two arguments are expected.", Arguments)
		end
		if Arguments[#Arguments].Type ~= "blk" then
			kill("if: No argument of type blk was given.", Arguments)
		end
		local flow = {}
		local expression = {}
		local elsemarker = false
		for _,argument in ipairs(Arguments) do
			if argument.Type == "blk" then
				table.insert(flow, {expression, argument.Content})
				expression = {}
			elseif argument.Content == "else" then
				elsemarker = true
			else
				table.insert(expression, argument)
			end
			if elsemarker == true then
				table.insert(flow, {"else", argument.Content})
			end
		end
		for _,pathway in ipairs(flow) do
			if pathway[1] == "else" then
				runBlock(pathway[2])
				break
			elseif argsToLuaExpression(pathway[1]) == true then
				runBlock(pathway[2])
				break
			end

		end
	end,
	["for"] = function(Arguments)
		LOOPRUNNING = true
		if #Arguments ~= 5 then
			kill("for: 5 arguments are expected.", Arguments)
		end
		if Arguments[1].Type ~= "str" then
			kill("for: Argument 1 is expected to be of type str.")
		end
		if Arguments[2].Type ~= "int" or Arguments[3].Type ~= "int" or Arguments[4].Type ~= "int" then
			kill("for: Arguments 2, 3, and 4 are expected to be of type int.", Arguments)
		end
		if Arguments[5].Type ~= "blk" then
			kill("for: Argument 5 is expected to be of type blk.")
		end

		local variableName = argumentToLuaObject(Arguments[1])
		local loopStart = argumentToLuaObject(Arguments[2])
		local loopEnd = argumentToLuaObject(Arguments[3])
		local increment = argumentToLuaObject(Arguments[4])
		local codeBlock = Arguments[5].Content

		if cv(variableName) ~= true then
			kill("for: Variable " .. variableName .. " does not exist.", Arguments)
		end
		if cvt(variableName) ~= "int" then
			kill("for: Variable " .. variableName .. " is not of type int.", Arguments)
		end

		WedjatProgramVariables[variableName].Content = loopStart
		while loopStart <= loopEnd and LOOPRUNNING == true do
			runBlock(codeBlock)
			loopStart = loopStart + increment
			WedjatProgramVariables[variableName].Content = ":" .. tostring(loopStart) .. ":"
		end
		LOOPRUNNING = false
	end,
	["repeat"] = function(Arguments)
		LOOPRUNNING = true
		local block = Arguments[1]
		if not block or block.Type ~= "blk" then
			kill("repeat: One argument is expected of type blk.")
		end
		while LOOPRUNNING == true do
			runBlock(block.Content)
		end
		LOOPRUNNING = false
	end,
	["break"] = function(Arguments)
		LOOPRUNNING = false
	end,
	["kill"] = function(Arguments)
		os.exit()
	end
}


runCommand = function(command)
	local CommandName = command.CommandName
	local Arguments = command.Arguments
	for _,argument in pairs(Arguments) do
		if argument.Type == "var" then
			argument.Content = WedjatProgramVariables[string.sub(argument.Content, 2, #argument.Content - 1)].Content
			argument.Type = GetDataType(argument.Content)
		elseif argument.Type == "flg" then
			argument.Content = tostring(arg[tonumber(string.sub(argument.Content, 2, #argument.Content))])
			argument.Type = GetDataType(argument.Content)
		end
	end

	if WedjatCoreCommands[CommandName] ~= nil then
		WedjatCoreCommands[CommandName](Arguments)
	end
end

runBlock = function(block)
	for _,statement in ipairs(formatStatements(SplitStatements(FinalTrim(CleanJunk(string.sub(block, 2, #block - 1)))))) do
		runCommand(statement)
	end
end

--[=[ START Command execution, management, and variable management ]=]--





--[=[ START Actually running stuff ]=]--

local Source = ""

local filenameparts = split(arg[1], ".")
if filenameparts[#filenameparts] ~= "wdj" then
	kill("wedjat-exec expects files of type \".wdj\"")
end

local file = io.open(arg[1], "r")
if file then
	Source = file:read("*all")
	file:close()
else
	kill("File not found: " .. arg[1])
end


local CleanSource = CleanJunk(Source)
local SuperCleanSource = FinalTrim(CleanSource)
local Statements = SplitStatements(SuperCleanSource)
local InstructionSheet = formatStatements(Statements)

for _,i in ipairs(InstructionSheet) do
	runCommand(i)
end

--[=[ END Actually running stuff ]=]--











--[=[ Developer Debugging Functions ]=]--
--[=[
local function printStatements()
	local i = 1
	for _,s in pairs(Statements) do
		print(i .. " | " .. s)
		i = i + 1
	end
end

local function printProgramCommands()
	local ic = 1
	for _,i in ipairs(InstructionSheet) do
		print("Command " .. ic .. ": " .. i.CommandName)
		local ai = 1
		for _,a in ipairs(i.Arguments) do
			print("    Arg" .. ai .. " (type " .. a.Type .. ") | " .. a.Content)
			ai = ai + 1
		end
		ic = ic + 1
		print(" ")
	end
end

printProgramCommands()
-- printProgramCommands()
--[=[ Developer Debugging Functions ]=]--
